<mediawiki xmlns="http://www.mediawiki.org/xml/export-0.3/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mediawiki.org/xml/export-0.3/ http://www.mediawiki.org/xml/export-0.3.xsd" version="0.3" xml:lang="en">
  <siteinfo>
    <sitename>gnuarmeclipse</sitename>
    <base>http://sourceforge.net/apps/mediawiki/gnuarmeclipse/index.php?title=Main_Page</base>
    <generator>MediaWiki 1.15.1</generator>
    <case>first-letter</case>
    <namespaces>
      <namespace key="-2">Media</namespace>
      <namespace key="-1">Special</namespace>
      <namespace key="0" />
      <namespace key="1">Talk</namespace>
      <namespace key="2">User</namespace>
      <namespace key="3">User talk</namespace>
      <namespace key="4">gnuarmeclipse</namespace>
      <namespace key="5">gnuarmeclipse talk</namespace>
      <namespace key="6">File</namespace>
      <namespace key="7">File talk</namespace>
      <namespace key="8">MediaWiki</namespace>
      <namespace key="9">MediaWiki talk</namespace>
      <namespace key="10">Template</namespace>
      <namespace key="11">Template talk</namespace>
      <namespace key="12">Help</namespace>
      <namespace key="13">Help talk</namespace>
      <namespace key="14">Category</namespace>
      <namespace key="15">Category talk</namespace>
    </namespaces>
  </siteinfo>
  <page>
    <title>Toolchain installation</title>
    <id>27</id>
    <revision>
      <id>265</id>
      <timestamp>2010-08-13T13:11:02Z</timestamp>
      <contributor>
        <username>Ilg-ul</username>
        <id>7</id>
      </contributor>
      <comment>/* Updating the PATH to include the toolchain */</comment>
      <text xml:space="preserve">==Windows==
... to be defined
==GNU/Linux==
... to be defined
==Mac OS X==
===CodeSourcery G++ Lite for ARM EABI===
Contrary to the other platforms, where binary distributions are available, the '''CodeSourcery G++ Lite''' for Mac OS X needs to be compiled from the source code available on the [http://www.codesourcery.com/sgpp/lite/arm/download.html CodeSourcery site].

====Prerequisite====
The only prerequisite is to install the [http://developer.apple.com/Tools/ Apple Developer Tools].

Previous versions required the typesetting system TeX installed, but it seems the current version of the build procedure fixed this, which is a very good news (the full TeX package was a huge install, taking more than 1.3 GB).

====Download the James Snyder's makefile====
James Snyder published a nice package that can be used to conveniently build everything from sources, by automating all steps from downloading, compiling and installing the binaries.

* point your browser to James Snyder's [http://github.com/jsnyder/arm-eabi-toolchain github.com] project
* take a look at the README.md file; if the procedure described there is significantly different, probably it is more up-to-date; follow it and leave us a notice to update the wiki.
* click on the top right [http://github.com/jsnyder/arm-eabi-toolchain/archives/master Download Source]
* download the TAR archive 

====Build the toolchain====
The rest of the procedure should be straightforward.

In Finder:
* create a directory where to run the procedure (I personally use '''$HOME/Work/Sourcery''')
* copy the downloaded archive here
* unpack the archive; you'll get a new folder named like jsnyder-arm-eabi-toolchain-cc29564
* check if the Makefile and the patch folder are present
* if, for any reasons (like a previous run), you already have the tarball for the CodeSourcery sources downloaded (an archive named like arm-2010q1-188-arm-none-eabi.src.tar.bz2), copy it here; otherwise, during the first run, the procedure will download it from the CodeSourcery server, so please be patient.

In Terminal:
* go to the jsnyder-arm-* folder
&lt;pre&gt;
 cd $HOME/Work/Sourcery/jsnyder-arm-eabi-toolchain-cc29564
&lt;/pre&gt;
* install the dependencies; this will download and build the GMP and the MPFR packages; it'll take a few minutes and will leave the new packages in /usr/local/*; this is needed only once, for subsequent runs using the same toolchain version you may skip it.
&lt;pre&gt;
 sudo time make install-deps
&lt;/pre&gt;
* prepare the destination folder and update the PATH (the procedure will use the newly created tools, so be sure you don't skip this, otherwise the procedure will fail)
&lt;pre&gt;
 mkdir -p $HOME/arm-cs-tools/bin
 export PATH=$HOME/arm-cs-tools/bin:$PATH
&lt;/pre&gt;
* build the toolchain; this will build the BINUTILS and the GCC packages; it'll take a few good minutes (30 on my Mini) and the new toolchain will be available in the arm-cs-tools folder. 
&lt;pre&gt;
 sudo time make install-cross
&lt;/pre&gt;

* check if the newly built compiler starts properly
&lt;pre&gt;
 arm-none-eabi-gcc -v

 Using built-in specs.
 Target: arm-none-eabi
 Configured with: ../../gcc-4.4-2010q1/configure --prefix=/Users/ilg/arm-cs-tools/ 
 --target=arm-none-eabi --enable-languages=c++ --with-gnu-ld --with-gnu-as 
 --with-newlib --disable-nls --disable-libssp --with-newlib --without-headers 
 --disable-shared --disable-threads --disable-libmudflap --disable-libgomp 
 --disable-libstdcxx-pch --disable-libunwind-exceptions --disable-libffi 
 --enable-extra-sgxxlite-multilibs
 Thread model: single
 gcc version 4.4.1 (GCC) 
&lt;/pre&gt;

* although you may leave the new toolchain in the default location, I recommend to move it to a more appropriate place. I personally use '''$HOME/Developer/Cross'''
&lt;pre&gt;
 sudo mv $HOME/arm-cs-tools $HOME/Developer/Cross
&lt;/pre&gt;

* if, for any reason, the build procedure fails, it is advisable to restart it in a clean environment
&lt;pre&gt;
 sudo make clean
&lt;/pre&gt;

====Study the GCC documentation====
The up-to-date GCC documentation is available on the CodeSourcery site, for each version.

The latest version is [http://www.codesourcery.com/sgpp/lite/arm/portal/release1294 2010-q1-188] and in the bottom of the page there are links to all available documents.
===Updating the PATH to include the toolchain===
On Mac OS X, as on GNU/Linux, setting the PATH requires special attention, since the graphical interface uses different settings than the classical Unix character mode terminal. While setting the PATH for all terminal sessions can be achieved by updating the shell initialisation scripts ($HOME/.bash_profile for bash), setting the PATH for the all graphical applications requires updating the proprietary $HOME/.MacOSX/environment.plist file.

Note: Eclipse has it's own way of defining environment variables (in the Eclipse menu: Preferences -&gt; C/C++ -&gt; Build -&gt; Environment). Unfortunately there is a bug in CDT that prevents the discovery options to function properly, so until the bug will be fixed, the only way is to set the PATH outside Eclipse.

This can be achieved by starting Eclipse indirectly with a bash script. The .command extensions is interpreted by Finder as Open with: Terminal.app.  
&lt;pre&gt;
 cd $HOME/Developer

 echo '#!/bin/bash' &gt; eclipse-3.6-cdt.command
 echo 'export PATH=$HOME/Developer/Cross/arm-cs-tools/bin:$PATH' &gt;&gt; eclipse-3.6-cdt.command
 echo '$HOME/Developer/Eclipses/eclipse-3.6-cdt/eclipse' &gt;&gt; eclipse-3.6-cdt.command

 chmod +x eclipse-3.6-cdt.command
&lt;/pre&gt;</text>
    </revision>
  </page>
</mediawiki>
